#lang racket/base
;; ---------------------------------------------------------------------------------------------------

(require racket/contract
         racket/file
         racket/list
         racket/system
         scribble/core
         scribble/render
         (prefix-in xml: xml)
         (submod txexpr safe))

(provide examples->html)

;; ---------------------------------------------------------------------------------------------------

;; This library defines a single function:
;; examples->html
;; Given a compound-paragraph or nested-flow generated by examples, it returns
;; a txexpr div representing the examples.
(define/contract (examples->html cp #:set-class [new-class 'racket-example])
  (->* ((or/c compound-paragraph? nested-flow?)) (#:set-class symbol?)
       txexpr?)

  (define part
    (make-part #f
               '()
               #f
               (make-style #f (list 'no-toc+aux 'no-sidebar 'no-index))
               '()
               (list cp)
               '()))

  (define tmpdir
     (make-temporary-file "hexample~a"
                          'directory))
  (define main "main.html")
  (define tmpfile (build-path tmpdir main))
  (render (list part) (list main) #:dest-dir tmpdir)

  
  (define html (xml:string->xexpr (file->string tmpfile #:mode 'text)))

  ; xml was read - remove directory 
  (system (format "rm -r ~a" tmpdir))
          
  (define div (findf-txexpr html
                            ; Finds a div with property 'class == "main"
                            (lambda (x)
                              (and (txexpr? x)
                                   (eq? 'div (get-tag x))
                                   (not (null? (get-attrs x)))
                                   (let ([cls (assoc 'class (get-attrs x))])
                                     (and cls (string=? "main" (second cls))))))))

  ;; set the new attribute
  (attr-set div 'class new-class))
  
                

